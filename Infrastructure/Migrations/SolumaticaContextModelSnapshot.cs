// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SolumaticaContext))]
    partial class SolumaticaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Actividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClaseId");

                    b.ToTable("Actividades");
                });

            modelBuilder.Entity("Domain.Entities.ActividadMultimedia", b =>
                {
                    b.Property<int>("ActividadId")
                        .HasColumnType("int");

                    b.Property<int>("MultimediaId")
                        .HasColumnType("int");

                    b.HasKey("ActividadId", "MultimediaId");

                    b.HasIndex("MultimediaId");

                    b.ToTable("ActividadMultimedias");
                });

            modelBuilder.Entity("Domain.Entities.Asignatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("InstitucionId");

                    b.ToTable("Asignaturas");
                });

            modelBuilder.Entity("Domain.Entities.Clase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AsignaturaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("HorarioId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.HasIndex("HorarioId");

                    b.ToTable("Clases");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("Domain.Entities.Directivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int?>("SedeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.HasIndex("SedeId");

                    b.ToTable("Directivos");
                });

            modelBuilder.Entity("Domain.Entities.Docente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("Docentes");
                });

            modelBuilder.Entity("Domain.Entities.Estudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GradoActual")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("SedeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrupoId");

                    b.HasIndex("PersonaId");

                    b.HasIndex("SedeId");

                    b.ToTable("Estudiantes");
                });

            modelBuilder.Entity("Domain.Entities.Grado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Grados");
                });

            modelBuilder.Entity("Domain.Entities.GradoAsignatura", b =>
                {
                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.Property<int>("GradoId")
                        .HasColumnType("int");

                    b.HasKey("AsignaturaId", "GradoId");

                    b.HasIndex("GradoId");

                    b.ToTable("GradoAsignaturas");
                });

            modelBuilder.Entity("Domain.Entities.GradoDocente", b =>
                {
                    b.Property<int>("DocenteId")
                        .HasColumnType("int");

                    b.Property<int>("GradoId")
                        .HasColumnType("int");

                    b.HasKey("DocenteId", "GradoId");

                    b.HasIndex("GradoId");

                    b.ToTable("GradoDocentes");
                });

            modelBuilder.Entity("Domain.Entities.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("GradoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SedeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradoId");

                    b.HasIndex("SedeId");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("Domain.Entities.GrupoAsignatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AsignaturaId")
                        .HasColumnType("int");

                    b.Property<int?>("DocenteId")
                        .HasColumnType("int");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.HasIndex("DocenteId");

                    b.HasIndex("GrupoId");

                    b.ToTable("GrupoAsignaturas");
                });

            modelBuilder.Entity("Domain.Entities.GrupoAsignaturaClase", b =>
                {
                    b.Property<int>("ClaseId")
                        .HasColumnType("int");

                    b.Property<int>("GrupoAsignaturaId")
                        .HasColumnType("int");

                    b.HasKey("ClaseId", "GrupoAsignaturaId");

                    b.HasIndex("GrupoAsignaturaId");

                    b.ToTable("GrupoAsignaturaClases");
                });

            modelBuilder.Entity("Domain.Entities.GrupoEstudiante", b =>
                {
                    b.Property<int>("GrupoId")
                        .HasColumnType("int");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("int");

                    b.HasKey("GrupoId", "EstudianteId");

                    b.HasIndex("EstudianteId");

                    b.ToTable("GrupoEstudiantes");
                });

            modelBuilder.Entity("Domain.Entities.Horario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiaDeSemana")
                        .HasColumnType("int");

                    b.Property<int?>("GrupoAsignaturaId")
                        .HasColumnType("int");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("int");

                    b.Property<uint>("HoraFinal")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("HoraInicial")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("GrupoAsignaturaId");

                    b.HasIndex("GrupoId");

                    b.ToTable("Horarios");
                });

            modelBuilder.Entity("Domain.Entities.Institucion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DANE")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MunicipioId")
                        .HasColumnType("int");

                    b.Property<string>("NIT")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PaginaWeb")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioId");

                    b.ToTable("Instituciones");
                });

            modelBuilder.Entity("Domain.Entities.Multimedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActividadId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaseId")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Uuid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ActividadId");

                    b.HasIndex("ClaseId");

                    b.ToTable("Multimedias");
                });

            modelBuilder.Entity("Domain.Entities.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Municipios");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DocumentoId")
                        .HasColumnType("int");

                    b.Property<int?>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId");

                    b.HasIndex("InstitucionId");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Sede", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("InstitucionId");

                    b.ToTable("Sedes");
                });

            modelBuilder.Entity("Domain.Entities.SedeDocente", b =>
                {
                    b.Property<int>("SedeId")
                        .HasColumnType("int");

                    b.Property<int>("DocenteId")
                        .HasColumnType("int");

                    b.HasKey("SedeId", "DocenteId");

                    b.HasIndex("DocenteId");

                    b.ToTable("SedeDocentes");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodigoRecuperacion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ExpiracionCodigo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<string>("RememberPassword")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Domain.Values.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15);

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("Domain.Entities.Actividad", b =>
                {
                    b.HasOne("Domain.Entities.Clase", "Clase")
                        .WithMany("Actividades")
                        .HasForeignKey("ClaseId");
                });

            modelBuilder.Entity("Domain.Entities.ActividadMultimedia", b =>
                {
                    b.HasOne("Domain.Entities.Actividad", "Actividad")
                        .WithMany()
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Multimedia", "Multimedia")
                        .WithMany()
                        .HasForeignKey("MultimediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Asignatura", b =>
                {
                    b.HasOne("Domain.Entities.Institucion", "Institucion")
                        .WithMany("Asignaturas")
                        .HasForeignKey("InstitucionId");
                });

            modelBuilder.Entity("Domain.Entities.Clase", b =>
                {
                    b.HasOne("Domain.Entities.Asignatura", "Asignatura")
                        .WithMany()
                        .HasForeignKey("AsignaturaId");

                    b.HasOne("Domain.Entities.Horario", "Horario")
                        .WithMany("Clases")
                        .HasForeignKey("HorarioId");
                });

            modelBuilder.Entity("Domain.Entities.Directivo", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sede", "Sede")
                        .WithMany("Directivos")
                        .HasForeignKey("SedeId");
                });

            modelBuilder.Entity("Domain.Entities.Docente", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Estudiante", b =>
                {
                    b.HasOne("Domain.Entities.Grupo", "Grupo")
                        .WithMany("Estudiantes")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sede", "Sede")
                        .WithMany("Estudiantes")
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.GradoAsignatura", b =>
                {
                    b.HasOne("Domain.Entities.Asignatura", "Asignatura")
                        .WithMany("GradoAsignaturas")
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Grado", "Grado")
                        .WithMany("GradoAsignaturas")
                        .HasForeignKey("GradoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.GradoDocente", b =>
                {
                    b.HasOne("Domain.Entities.Docente", "Docente")
                        .WithMany("GradoDocentes")
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Grado", "Grado")
                        .WithMany()
                        .HasForeignKey("GradoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Grupo", b =>
                {
                    b.HasOne("Domain.Entities.Grado", "Grado")
                        .WithMany("Grupos")
                        .HasForeignKey("GradoId");

                    b.HasOne("Domain.Entities.Sede", "Sede")
                        .WithMany("Grupos")
                        .HasForeignKey("SedeId");
                });

            modelBuilder.Entity("Domain.Entities.GrupoAsignatura", b =>
                {
                    b.HasOne("Domain.Entities.Asignatura", "Asignatura")
                        .WithMany("GrupoAsignaturas")
                        .HasForeignKey("AsignaturaId");

                    b.HasOne("Domain.Entities.Docente", "Docente")
                        .WithMany("GrupoAsignaturas")
                        .HasForeignKey("DocenteId");

                    b.HasOne("Domain.Entities.Grupo", "Grupo")
                        .WithMany("GrupoAsignaturas")
                        .HasForeignKey("GrupoId");
                });

            modelBuilder.Entity("Domain.Entities.GrupoAsignaturaClase", b =>
                {
                    b.HasOne("Domain.Entities.Clase", "Clase")
                        .WithMany("GrupoAsignaturaClases")
                        .HasForeignKey("ClaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GrupoAsignatura", "GrupoAsignatura")
                        .WithMany("GrupoAsignaturaClases")
                        .HasForeignKey("GrupoAsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.GrupoEstudiante", b =>
                {
                    b.HasOne("Domain.Entities.Estudiante", "Estudiante")
                        .WithMany()
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Horario", b =>
                {
                    b.HasOne("Domain.Entities.GrupoAsignatura", null)
                        .WithMany("Horarios")
                        .HasForeignKey("GrupoAsignaturaId");

                    b.HasOne("Domain.Entities.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId");
                });

            modelBuilder.Entity("Domain.Entities.Institucion", b =>
                {
                    b.HasOne("Domain.Entities.Municipio", "Municipio")
                        .WithMany("Instituciones")
                        .HasForeignKey("MunicipioId");
                });

            modelBuilder.Entity("Domain.Entities.Multimedia", b =>
                {
                    b.HasOne("Domain.Entities.Actividad", null)
                        .WithMany("Multimedias")
                        .HasForeignKey("ActividadId");

                    b.HasOne("Domain.Entities.Clase", null)
                        .WithMany("Multimedias")
                        .HasForeignKey("ClaseId");
                });

            modelBuilder.Entity("Domain.Entities.Municipio", b =>
                {
                    b.HasOne("Domain.Entities.Departamento", "Departamento")
                        .WithMany("Municipios")
                        .HasForeignKey("DepartamentoId");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.HasOne("Domain.Values.Documento", "Documento")
                        .WithMany()
                        .HasForeignKey("DocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Institucion", "Institucion")
                        .WithMany()
                        .HasForeignKey("InstitucionId");
                });

            modelBuilder.Entity("Domain.Entities.Sede", b =>
                {
                    b.HasOne("Domain.Entities.Institucion", "Institucion")
                        .WithMany("Sedes")
                        .HasForeignKey("InstitucionId");
                });

            modelBuilder.Entity("Domain.Entities.SedeDocente", b =>
                {
                    b.HasOne("Domain.Entities.Docente", "Docente")
                        .WithMany("SedeDocentes")
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sede", "Sede")
                        .WithMany("SedeDocentes")
                        .HasForeignKey("SedeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithOne("Usuario")
                        .HasForeignKey("Domain.Entities.Usuario", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
